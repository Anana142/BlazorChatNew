@page "/"
@using Nastenka.Services.Service
@rendermode InteractiveServer

@inject RedisNotificationService Service

<PageTitle>Home</PageTitle>

<h1>Nastenka chat</h1>
<div style="height: 600px">
    <ul>
        @for(int i = 0; i < Service.GetMessages().Count; i++)
        {   
            <li style=" display: flex;
                        column-gap: 20px;
                        background: #edf2f4;;
                        height:45px;
                        min-width: 100px;
                        border-radius: 8px;
                        border-width: 0px;
                        padding: 10px;
                        margin:10px;
                        display:flex;
                        align-items:center;
                        ">
                <p>@Service.GetMessages()[i]</p>
                
            </li>
        }
       
</ul>
</div>

    <input @bind="NewMessage" type="text" placeholder="Введите сообщение"
           style=" width:500px;
                   height:45px;
                   border-radius: 20px;
                   padding: 10px;
                   border-color: #caf0f8;
                   background: #fff;
                   
                   
                    "
        />
    <button style=" width:120px;
                    height: 45px;
                    border-radius: 20px;
                    border-width: 0px;
                    background: #caf0f8;
                    "
    
            @onclick="SendMessage">
        Отправить
    </button>
                
                
                
                




@code {
    public string NewMessage { get; set; } = string.Empty;

    public void SendMessage()
    {
        if (string.IsNullOrEmpty(NewMessage))
            return;

        Service.GetSub().Publish("messages", NewMessage);
        NewMessage = string.Empty;

    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Service.EventHandler += ReloadPage;
    }



    async void ReloadPage(object sender, EventArgs e)
    {
       await InvokeAsync(StateHasChanged);
    }


}